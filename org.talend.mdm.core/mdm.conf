######################################################
#
# Configuration file for Talend MDM
# this file should be called mdm.conf
# and located at the root of the jboss/bin directory
#
######################################################

######################################################
# System Setting
######################################################

system.data.auto.init=true
system.data.auto.upgrade=true
#Means even though new Version Number is equal or less than your current system Version Number,
#migration tasks will still be executed 
system.data.force.upgrade=false

######################################################
# eXist DB Setting
######################################################
xmldb.server.name=localhost
xmldb.server.port=8080
xmldb.administrator.username=admin
xmldb.administrator.password=1bc29b36f623ba82aaf6724fd3b16718
xmldb.driver=org.exist.xmldb.DatabaseImpl
xmldb.dbid=exist
xmldb.dburl=exist/xmlrpc/db
xmldb.isupurl=exist/
#xmldb.type can only be exist,berkeley or oracle.
xmldb.type=exist
xmlserver.class=com.amalto.xmldb.XmldbSLWrapper

########################################################
#  Qizx xml db Setting
########################################################
#xmldb.type=qizx
#xmlserver.class=org.talend.mdm.qizx.xmldb.QizxWrapper
#xmldb.qizx.ecountsamplesize=2000
## default storage dir is jboss_home/server/default/data/Qizx
#qizx.storage.dir=

######################################################
# berkeley DB XML Setting
######################################################
#xmldb.type=berkeley
#xmlserver.class=org.talend.mdm.berkeley.xmldb.BerkeleyXmlDBWrapper
## default env dir is jboss_home/server/default/data/bdbxml
#berkeley.env.dir=
#### settings -- see Berkeley DB documentation
## max log file size ( MBytes ), DB default is 10
#xmldb.bdbxml.maxlogfilesize = XX
## log buffer size ( KBytes ), DB default is 32
#xmldb.bdbxml.logbuffersize = XX
## db cache ( MBytes ), DB default is 256K
#xmldb.bdbxml.cachesize = 80
## transaction max active number, default is 20
#xmldb.bdbxml.txnmaxactive = XX
## transaction time out ( seconds ), default is none
#xmldb.bdbxml.timeout = 180
## use read-committed transactions (default is serializable isolation)
#xmldb.bdbxml.readcommitted = true
## deadlock detection
## use a locktimeout if > 0, otherwise resolve deadlocks by picking the thread with the smallest
## number of write locks. The thread with the smallest number of write locks is the one that has
## performed the least amount of work
#xmldb.bdbxml.locktimeout = XX
## number of retries when a deadlock occurs, default = 20
#xmldb.bdbxml.maxretry = XX
## auto indexing (default is true)
#xmldb.bdbxml.autoindexing = false
## cost query optimization (default is true)
#xmldb.bdbxml.statisticsenabled = false
# maximum number of locks, default is 1000
#xmldb.bdbxml.maxlocks=1000
# maximum number of locking entities, default is 1000
#xmldb.bdbxml.maxlockers=1000
## maximum number of locked objects, default is 1000
#xmldb.bdbxml.maxlockobjects=1000

######################################################
# Oracle DB Setting
######################################################
#xmldb.server.name=192.168.0.225
#xmldb.server.port=1521
#xmldb.administrator.username=system
#xmldb.administrator.password=shong
#xmldb.driver=oracle.jdbc.driver.OracleDriver
#xmldb.dbid=talend
##xmldb.type can only be exist,berkeley or oracle.
#xmldb.type=oracle
#xmlserver.class=org.talend.mdm.oracle.xmldb.OracleXmlDbWrapper

######################################################
# Subscription Engine
######################################################

subscription.engine.autostart=true

#The number of simultaneous routing orders executed concurrently.
#This is a token based mechanism, when all tokens are distributed,
#the next Routing Order execution is put on hold until tokens are available
#Defaults to 20
routing.engine.executors=20

#The maximum number of milliseconds a Routing Order can take to execute.
#When the timeout is reached, an error is thrown and the ROuting Order is
#moved from the ACTIVE queue to the FAILED queue
#Note: this does not prevent the Routing Order from finishing execution,
#it simply is a timed garbage collection mechanism on Routing Orders
#Defaults to 300000 e.g. 5 minutes
routing.engine.max.execution.time.millis=300000

#The number of milliseconf between two scans of Scheduled Routing Orders
#and their executor tokens allocation
#A typical cycle goes by
#   1- Reclaiming tokens of Routing Orders that finished execution (successfully or not)
#   2- Reclaiming tokens of Routing Orders that timed out (see setting above)
#   3- Allocating tokens to Routing Orders waiting for execution and scheduling their execution
routing.engine.run.period.millis=2500

#max cache size of objects
max_cache_size=5000
cluster_override=false