######################################################
#
# Configuration file for Xtentis MDM
# this file should be called mdm.conf
# and located at the root of the jboss/MDM directory
#
######################################################


######################################################
# XML Database
######################################################

#The type of DB - only xmldb supported in 2.20
#xmldb uses the direver in com.amalto.xmldb
xmlserver.type=xmldb

#The host of the the xmldb database
xmldb.server.name=localhost

#The port on the host typically 8080 for embedded use, 8088 for standalone use
xmldb.server.port=8080

#The username of the  xmld db administrator
#For eXist this is set in conf.xml located in the WEB-INF directory
xmldb.administrator.username=admin

#The password of the  xmld db administrator
#For eXist this is set in conf.xml located in the WEB-INF directory
xmldb.administrator.password

#The database XML:DB compliant driver
xmldb.driver=org.exist.xmldb.DatabaseImpl

#The database XML:DB id
xmldb.dbid=exist

#The database XML:DB path to the root collection
#the full URL will look like xmldb:exist://localhost:8080/exist/xmlrpc/db
#For standalone, the usual value is xmlrpc/db  (not exist suffix)
xmldb.dburl=exist/xmlrpc/db

#An url to test to see if the db is up
#The URL will look like http://localhost:8080/exist/
#Leave empty for standalone use
xmldb.isupurl=exist/

######################################################
# Subscription Engine
######################################################

#The number of simultaneous routing orders executed concurrently.
#This is a token based mechanism, when all tokens are distributed,
#the next Routing Order execution is put on hold until tokens are available
#Defaults to 20
routing.engine.executors=20

#The maximum number of milliseconds a Routing Order can take to execute.
#When the timeout is reached, an error is thrown and the ROuting Order is
#moved from the ACTIVE queue to the FAILED queue
#Note: this does not prevent the Routing Order from finishing execution,
#it simply is a timed garbage collection mechanism on Routing Orders
#Defaults to 300000 e.g. 5 minutes
routing.engine.max.execution.time.millis=300000

#The number of milliseconf between two scans of Scheduled Routing Orders
#and their executor tokens allocation
#A typical cycle goes by
#	1- Reclaiming tokens of Routing Orders that finished execution (successfully or not)
#	2- Reclaiming tokens of Routing Orders that timed out (see setting above)
#	3- Allocating tokens to Routing Orders waiting for execution and scheduling their execution
routing.engine.run.period.millis=2500
